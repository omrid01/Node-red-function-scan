[
    {
        "id": "028fe1bdbc6bf3ee",
        "type": "tab",
        "label": "Diff",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b7fd8a2cce8052cc",
        "type": "ui-base",
        "name": "ui",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-dropdown",
            "ui-control",
            "ui-text",
            "ui-text-input"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "hidden",
        "showReconnectNotification": true,
        "notificationDisplayTime": 5,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "b7b1935fbb33bbc8",
        "type": "ui-theme",
        "name": "Default theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "d9993d7053343c5a",
        "type": "ui-page",
        "name": "Diff",
        "ui": "b7fd8a2cce8052cc",
        "path": "/diff",
        "icon": "set-right",
        "layout": "grid",
        "theme": "b7b1935fbb33bbc8",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "8bd22dd1fce24d1d",
        "type": "ui-group",
        "name": "Group 1",
        "page": "d9993d7053343c5a",
        "width": "11",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "8511bbda176e17f9",
        "type": "debug",
        "z": "028fe1bdbc6bf3ee",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 220,
        "wires": []
    },
    {
        "id": "10800a27407547c5",
        "type": "function",
        "z": "028fe1bdbc6bf3ee",
        "name": "Prep table data",
        "func": "const diffs = msg.diffs;\nconst data = [];\nfor (let i = 0; i < diffs.length ; i++)\n  data.push({\n    id:i,\n    diffType: diffs[i].diffType,\n    oldIndex: diffs[i].oldIndex,\n    newIndex: diffs[i].newIndex,\n    oldStr:   diffs[i].oldStr.replace(/ /g, '\\u00A0'),\n    newStr:   diffs[i].newStr.replace(/ /g, '\\u00A0')\n  });\nmsg.payload = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 120,
        "wires": [
            [
                "4d4ea7464eb4465b"
            ]
        ],
        "info": "pkg,nexe, bun\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>LCS Visualizer</title>\r\n  <style>\r\n    body { font-family: sans-serif; padding: 2em; }\r\n    textarea { width: 45%; height: 200px; margin-right: 2%; vertical-align: top; }\r\n    .result { margin-top: 2em; }\r\n    .added { background-color: #d4f4dd; }\r\n    .removed { background-color: #f8d7da; }\r\n    .matched { background-color: #dbe6fd; }\r\n    .line { padding: 5px; border-bottom: 1px solid #ccc; }\r\n  </style>\r\n</head>\r\n<body>\r\n  <h2>LCS Visualizer</h2>\r\n  <textarea id=\"oldText\" placeholder=\"Old Version\"></textarea>\r\n  <textarea id=\"newText\" placeholder=\"New Version\"></textarea>\r\n  <button onclick=\"visualizeLCS()\">Compare</button>\r\n\r\n  <div class=\"result\" id=\"output\"></div>\r\n\r\n  <script>\r\n    function visualizeLCS() {\r\n      const oldArray = document.getElementById('oldText').value.split('\\n');\r\n      const newArray = document.getElementById('newText').value.split('\\n');\r\n      const output = document.getElementById('output');\r\n      output.innerHTML = '';\r\n\r\n      // Build LCS matrix\r\n      const lcsMatrix = Array(oldArray.length + 1).fill().map(() =>\r\n        Array(newArray.length + 1).fill(0));\r\n\r\n      for (let i = 1; i <= oldArray.length; i++) {\r\n        for (let j = 1; j <= newArray.length; j++) {\r\n          if (oldArray[i - 1] === newArray[j - 1]) {\r\n            lcsMatrix[i][j] = lcsMatrix[i - 1][j - 1] + 1;\r\n          } else {\r\n            lcsMatrix[i][j] = Math.max(lcsMatrix[i - 1][j], lcsMatrix[i][j - 1]);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Backtrack\r\n      let i = oldArray.length, j = newArray.length;\r\n      const lines = [];\r\n      while (i > 0 || j > 0) {\r\n        if (i > 0 && j > 0 && oldArray[i - 1] === newArray[j - 1]) {\r\n          lines.unshift({ type: 'matched', text: oldArray[i - 1] });\r\n          i--; j--;\r\n        } else if (j > 0 && (i === 0 || lcsMatrix[i][j - 1] >= lcsMatrix[i - 1][j])) {\r\n          lines.unshift({ type: 'added', text: newArray[j - 1] });\r\n          j--;\r\n        } else if (i > 0) {\r\n          lines.unshift({ type: 'removed', text: oldArray[i - 1] });\r\n          i--;\r\n        }\r\n      }\r\n\r\n      // Display\r\n      lines.forEach(line => {\r\n        const div = document.createElement('div');\r\n        div.className = `line ${line.type}`;\r\n        div.textContent = `${line.type.toUpperCase()}: ${line.text}`;\r\n        output.appendChild(div);\r\n      });\r\n    }\r\n  </script>\r\n</body>\r\n</html>\r\n"
    },
    {
        "id": "98704dd90295b88e",
        "type": "function",
        "z": "028fe1bdbc6bf3ee",
        "name": "Prep text formatting",
        "func": "let formattedStr = '';\nfor (let i = 0; i < msg.diffs.length ; i++)\n{\n    let spacer = ' ';\n    let oldStr = msg.diffs[i].oldStr;\n    let newStr = msg.diffs[i].newStr;\n\n    if (msg.diffMode === 'C')\n    {\n        const charFiller = 'â–¡';\n        spacer = '';\n        if (oldStr === ' ')\n            oldStr = charFiller;\n        if (newStr === ' ')\n            newStr = charFiller;        \n    }\n\n    switch (msg.diffs[i].diffType)\n    {\n        case \"match\":\n            formattedStr += (newStr + spacer);\n            break;\n        case \"added\":\n            formattedStr += `<span style=\"color:green\">${newStr}${spacer}</span>`\n            break;\n        case \"removed\":\n            formattedStr += `<span style=\"color:red;text-decoration:line-through;\">${oldStr}${spacer}</span>`\n            break;\n    }\n}\nmsg.payload = formattedStr;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 160,
        "wires": [
            [
                "4d4ea7464eb4465b"
            ]
        ],
        "info": "pkg,nexe, bun\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>LCS Visualizer</title>\r\n  <style>\r\n    body { font-family: sans-serif; padding: 2em; }\r\n    textarea { width: 45%; height: 200px; margin-right: 2%; vertical-align: top; }\r\n    .result { margin-top: 2em; }\r\n    .added { background-color: #d4f4dd; }\r\n    .removed { background-color: #f8d7da; }\r\n    .matched { background-color: #dbe6fd; }\r\n    .line { padding: 5px; border-bottom: 1px solid #ccc; }\r\n  </style>\r\n</head>\r\n<body>\r\n  <h2>LCS Visualizer</h2>\r\n  <textarea id=\"oldText\" placeholder=\"Old Version\"></textarea>\r\n  <textarea id=\"newText\" placeholder=\"New Version\"></textarea>\r\n  <button onclick=\"visualizeLCS()\">Compare</button>\r\n\r\n  <div class=\"result\" id=\"output\"></div>\r\n\r\n  <script>\r\n    function visualizeLCS() {\r\n      const oldArray = document.getElementById('oldText').value.split('\\n');\r\n      const newArray = document.getElementById('newText').value.split('\\n');\r\n      const output = document.getElementById('output');\r\n      output.innerHTML = '';\r\n\r\n      // Build LCS matrix\r\n      const lcsMatrix = Array(oldArray.length + 1).fill().map(() =>\r\n        Array(newArray.length + 1).fill(0));\r\n\r\n      for (let i = 1; i <= oldArray.length; i++) {\r\n        for (let j = 1; j <= newArray.length; j++) {\r\n          if (oldArray[i - 1] === newArray[j - 1]) {\r\n            lcsMatrix[i][j] = lcsMatrix[i - 1][j - 1] + 1;\r\n          } else {\r\n            lcsMatrix[i][j] = Math.max(lcsMatrix[i - 1][j], lcsMatrix[i][j - 1]);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Backtrack\r\n      let i = oldArray.length, j = newArray.length;\r\n      const lines = [];\r\n      while (i > 0 || j > 0) {\r\n        if (i > 0 && j > 0 && oldArray[i - 1] === newArray[j - 1]) {\r\n          lines.unshift({ type: 'matched', text: oldArray[i - 1] });\r\n          i--; j--;\r\n        } else if (j > 0 && (i === 0 || lcsMatrix[i][j - 1] >= lcsMatrix[i - 1][j])) {\r\n          lines.unshift({ type: 'added', text: newArray[j - 1] });\r\n          j--;\r\n        } else if (i > 0) {\r\n          lines.unshift({ type: 'removed', text: oldArray[i - 1] });\r\n          i--;\r\n        }\r\n      }\r\n\r\n      // Display\r\n      lines.forEach(line => {\r\n        const div = document.createElement('div');\r\n        div.className = `line ${line.type}`;\r\n        div.textContent = `${line.type.toUpperCase()}: ${line.text}`;\r\n        output.appendChild(div);\r\n      });\r\n    }\r\n  </script>\r\n</body>\r\n</html>\r\n"
    },
    {
        "id": "4d04a6258527d1f1",
        "type": "inject",
        "z": "028fe1bdbc6bf3ee",
        "name": "Words",
        "props": [
            {
                "p": "diffMode",
                "v": "W",
                "vt": "str"
            },
            {
                "p": "oldText",
                "v": "The grey fox  jumped over the yellow fence",
                "vt": "str"
            },
            {
                "p": "newText",
                "v": "The Fox jumped high over the red fence",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "76028e63681acf56"
            ]
        ]
    },
    {
        "id": "075e35860210f101",
        "type": "inject",
        "z": "028fe1bdbc6bf3ee",
        "name": "Lines",
        "props": [
            {
                "p": "diffMode",
                "v": "L",
                "vt": "str"
            },
            {
                "p": "oldText",
                "v": "'Line 1\\n\\nLine  2\\nline     3\\nLine       4'",
                "vt": "jsonata"
            },
            {
                "p": "newText",
                "v": "'Line 1\\nline     3\\nLine 4\\nline  5'",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "76028e63681acf56"
            ]
        ]
    },
    {
        "id": "76028e63681acf56",
        "type": "Omrid01_function_scan",
        "z": "028fe1bdbc6bf3ee",
        "name": "",
        "diffMode": "L",
        "caseSensitive": false,
        "ignoreWS": true,
        "x": 320,
        "y": 160,
        "wires": [
            [
                "8511bbda176e17f9",
                "8c08dfba7805de6e"
            ]
        ]
    },
    {
        "id": "d1248b3eda3fd772",
        "type": "ui-template",
        "z": "028fe1bdbc6bf3ee",
        "group": "8bd22dd1fce24d1d",
        "page": "",
        "ui": "",
        "name": "Main Form",
        "order": 1,
        "width": "19",
        "height": 14,
        "head": "",
        "format": "<template>\n    <v-sheet class=\"rounded-xl ma-2\" height=\"350px\" width=\"1030px\" color=\"grey-lighten-3\" elevation=\"12\">\n    <div class=\"ml-8 mt-2 mb-n3\">\n        <h2 style=\"color:#6495ED\">Input Form</h2>\n    </div>\n    <v-container fluid class=\"ma-0\">\n        <v-row>\n            <v-col cols=\"auto\" class=\"mx-1\">\n                <v-textarea label=\"Old Text Block\" clearable rows=\"7\" width=\"470\" v-model=\"oldText\" maxlength=\"1000\"></v-textarea>\n            </v-col>\n            <v-col cols=\"auto\" class=\"mx-2\">\n                <v-textarea label=\"New Text Block\" clearable rows=\"7\" width=\"470\" v-model=\"newText\" maxlength=\"1000\"></v-textarea>\n            </v-col>\n        </v-row>\n        <v-row>\n            <v-col cols=\"auto\" class=\"mx-2\">\n                <v-checkbox class=\"mx-2\" v-model=\"caseSensitive\" label=\"Case Sensitive\"></v-checkbox>\n            </v-col>\n            <v-col cols=\"auto\" class=\"mx-2\">\n                <v-checkbox class=\"mx-2\" v-model=\"ignoreWS\" label=\"Ignore White Spaces\"></v-checkbox>\n            </v-col>\n            <v-col cols=\"auto\" class=\"mx-2\">\n                <v-btn style=\"margin-left:10px\" @click=\"onSubmit('L')\">Compare by Line</v-btn>\n                <v-btn style=\"margin-left:10px\" @click=\"onSubmit('W')\">Compare by Word</v-btn>\n                <v-btn style=\"margin-left:10px\" @click=\"onSubmit('C')\">Compare by Char</v-btn>\n            </v-col>\n        </v-row>\n    </v-container>\n    <div class=\"ml-8 mt-2\">\n        <h2 style=\"color:#6495ED\">Diff Results by Line</h2>\n    </div>\n    <div class=\"ml-6\" style=\"width:980px; height:200px;\">\n    <!--    <h3 style=\"margin-bottom:10px;\">Diff Results by Lines</h3> -->\n        <div id=\"diffGrid\" style=\"max-width:960px\"></div>\n    </div>\n    <div class=\"ml-8 mt-4\">\n        <h2 style=\"color:#6495ED\">Diff Results by Word</h2>\n    </div>\n    <div class=\"ml-6 pa-4\" style=\"border: 1px solid black; width:960px; height:150px;font-size:170%\">\n        <v-text v-html=\"diffWordResult\"></v-text>\n    </div>\n    </v-sheet>\n\n    <link href=\"/NR_WebRoot/tabulator-tables/dist/css/tabulator.min.css\" rel=\"stylesheet\">\n</template>\n<script type=\"text/javascript\" src=\"/NR_WebRoot/tabulator-tables/dist/js/tabulator.min.js\"></script>\n\n<script type=\"text/javascript\">\n\nexport default {\n/***********************************************************************************************/\n// Data\n/***********************************************************************************************/\ndata () {\n\nconst oldTestWords = \"The grey fox jumped over the yellow fence\";\nconst newTestWords = \"The Fox jumped high over the red fence\";\nconst oldTestLines = `Line 1\nLine 2\nline 3\nLine 4`;\nconst newTestLines = `Line    1\nLINE 3\nLine        4\nline 5`;\nconst oldTestChars = \"AbC DEF\";\nconst newTestChars = \"ABCDFXX\";\n\n    return {\n        //oldText:oldTestWords,\n        //oldText:oldTestLines,\n        //oldText:oldTestChars,\n        oldText:\"\",\n\n        //newText:newTestWords,\n        //newText:newTestLines,\n        //newText:newTestChars,\n        newText:\"\",\n\n        caseSensitive:false,\n        ignoreWS: true,\n        grid: null,\n        diffWordResult:\"\" //'<span style=\"color: red;\">red</span><span style=\"color: blue;\">blue</span>'\n    }\n},\n/***********************************************************************************************/\n// Mounted\n/***********************************************************************************************/\nmounted() {\n    const vThis = this; // save current 'this', for use inside callbacks & function properties\n\n    // load the Tabulator grid\n    this.loadTabulator(); // runs async\n\n     // Set Socket listener\n    this.$socket.on('msg-input:' + this.id, function(msg)\n    {\n        if (!msg || (msg.hasOwnProperty(\"_client\") && msg._client.socketId !== vThis.$socket.id ))\n        return;\n        \n        vThis.processMsg(msg);\n        //vThis.tst(msg);\n    });\n},\n/***********************************************************************************************/\n// Methods\n/***********************************************************************************************/\nmethods: {\n    //tst: function(msg){console.log(\"msg is here\",msg)},\n    //--------------------------------------------------------------------------------------------\n    onSubmit: function(mode) {\n        const msg = {\n            diffMode:mode,\n            ignoreWS:this.ignoreWS,\n            caseSensitive:this.caseSensitive,\n            oldText:this.oldText,\n            newText:this.newText\n        }\n        this.send(msg);\n\n        //console.log(`comparing ${this.oldText} to ${this.newText}, mode=${this.diffMode}, CS=${this.caseSensitive} IWS=${this.ignoreWS}`);\n        //this.diffWordResult = 'Now it is <span style=\"color: green;\">green</span>'\n    },\n    onSelectMode: function () {\n        //console.log(\"Mode selected: \",this.diffMode);\n    return;\n    },\n    /*\n    rowProps: function (data) {\n        //console.log(\"In rowProps, data=\",data);\n        return {\n            class: {\n                'diffAdded': data.item.diffType === 'added',\n                'diffRemoved': data.item.diffType === 'removed'\n            }\n        }\n    },\n    */\n    loadTabulator:  async function()\n    {\n        function delay(ms) {return new Promise(resolve => setTimeout(resolve, ms));}\n        \n        const loopCount = 50;\n        for (let i = 0; i < loopCount; i++)\n        {\n            if (typeof Tabulator===\"function\") // i.e. Tabulator import script finished loading\n            {\n                this.createGrid();\n                return;\n            }\n            else\n                if (i === (loopCount-1))\n                {\n                    console.log(\"Failed to load Tabulator, count=\",i+1);\n                    alert(\" Failed to Load the Tabulator library\");\n                }\n                else\n                    await delay(100);\n        }\n    },\n    createGrid: function ()\n    {\n        const gridCfg = {\n            height: 200,layout: \"fitColumns\",\n            columns: [\n                {field:\"id\",visible:false},\n                {field: \"diffType\",title: \"Diff Type\",width: 120,hozAlign: \"left\"},\n                {field: \"oldIndex\",title: \"Old Line #\",width:120,hozAlign:\"center\"},\n                {field: \"newIndex\",title: \"New Line #\",width:120,hozAlign:\"center\"},\n                {field: \"oldStr\",title: \"Old Line\",width:280,hozAlign:\"left\"},\n                {field: \"newStr\",title: \"New Line\",hozAlign:\"left\"}\n            ],\n            rowFormatter: function(row) {\n                const rowData = row.getData();\n                const rowStyle = row.getElement().style;\n                rowStyle.fontSize = \"18px\";\n\n                const diffType = rowData.diffType;\n                switch (diffType)\n                {\n                    case \"added\":\n                        rowStyle.backgroundColor = \"lightgreen\";\n                        break;\n                    case \"removed\":\n                        rowStyle.backgroundColor = \"lightpink\";\n                        break;                        \n                }\n            }\n            /* ,data:[\n                {id:1, diffType:\"match\",oldIndex:1,newIndex:2,oldStr:\"Old line 1\",newStr:\"New Line 1\"},\n                {id:2, diffType:\"added\",oldIndex:1,newIndex:2,oldStr:\"Old line 2\",newStr:\"New Line 2\"},\n                {id:3, diffType:\"removed\",oldIndex:1,newIndex:2,oldStr:\"Old line 3\",newStr:\"New Line 3\"}\n            ]*/\n        }\n        try {\n            this.grid = new Tabulator(\"#diffGrid\",gridCfg);\n            this.grid.on(\"tableBuilt\", function() {\n                //this.gridReady = true;\n                console.log(\"Grid is ready\");\n            });\n        }\n        catch (err) {\n            console.error(\"Grid creationn failed:\",err);\n            alert(\"Grid creationn failed:\",err);\n        }\n    },\n    processMsg: function (msg)\n    {\n        //console.log(\"processing msg\",msg);\n        switch(msg.diffMode)\n        {\n            case 'L':\n                this.diffWordResult = \"\";\n                this.grid.setData(msg.payload);\n                break;\n            case 'W':\n            case 'C':\n                this.grid.clearData();\n                this.diffWordResult = msg.payload;\n                break;\n        }\n    }\n} // methods\n} // export default\n</script>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "76028e63681acf56"
            ]
        ]
    },
    {
        "id": "8c08dfba7805de6e",
        "type": "switch",
        "z": "028fe1bdbc6bf3ee",
        "name": "",
        "property": "diffMode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "L",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "W",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "C",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 490,
        "y": 160,
        "wires": [
            [
                "10800a27407547c5"
            ],
            [
                "98704dd90295b88e"
            ],
            [
                "98704dd90295b88e"
            ]
        ]
    },
    {
        "id": "4d4ea7464eb4465b",
        "type": "link out",
        "z": "028fe1bdbc6bf3ee",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "37d71071bf88d73d"
        ],
        "x": 865,
        "y": 140,
        "wires": []
    },
    {
        "id": "37d71071bf88d73d",
        "type": "link in",
        "z": "028fe1bdbc6bf3ee",
        "name": "Form",
        "links": [
            "4d4ea7464eb4465b"
        ],
        "x": 85,
        "y": 80,
        "wires": [
            [
                "d1248b3eda3fd772"
            ]
        ]
    },
    {
        "id": "0a02c77b556cfb5c",
        "type": "inject",
        "z": "028fe1bdbc6bf3ee",
        "name": "Chars",
        "props": [
            {
                "p": "diffMode",
                "v": "C",
                "vt": "str"
            },
            {
                "p": "oldText",
                "v": "ABCD EFG",
                "vt": "str"
            },
            {
                "p": "newText",
                "v": "abCxxEHIJ",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "76028e63681acf56"
            ]
        ]
    }
]